"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Generic, List, Optional, Type, TypeVar

T = TypeVar("T")

class JsonSerializer:
    """Helper class to serialize/deserialize special types to/from JSON."""
    @staticmethod
    def default(obj: Any) -> Any:
        """Convert objects to JSON-serializable types."""
        ...

    @staticmethod
    def object_hook_with_types(obj_dict: Any, type_hints: Any) -> Any:
        """
        Process JSON objects during deserialization using type hints.

        Args:
            obj_dict: Dictionary to process
            type_hints: Dictionary mapping field names to their type annotations
        """
        ...

class JsonDB(Generic[T]):
    """A simple JSON file-based database for dataclasses."""
    def __init__(
        self, data_class: Type[T], file_path: Path, primary_key: Optional[str] = ...
    ) -> None:
        """
        Initialize the database with a dataclass type and file path.

        Args:
            data_class: The dataclass type this database will store
            file_path: Path to the JSON file
            primary_key: The field name to use as primary key (optional)
        """
        ...

    def save(self) -> None:
        """Save current data to the file."""
        ...

    def all(self) -> List[T]:
        """Get all items."""
        ...

    def get(self, key_value: Any) -> Optional[T]:
        """Get item by primary key value."""
        ...

    def find(self, **kwargs: Any) -> List[T]:
        """Find items matching the given criteria."""
        ...

    def add(self, item: T) -> T:
        """
        Add an item to the database.

        Args:
            item: The item to add, must be of the correct type

        Returns:
            The added item

        Raises:
            JsonDBException: If the item is not of the expected type or primary key already exists
        """
        ...

    def update(self, item: T) -> T:
        """
        Update an existing item by its current primary key value.

        Args:
            item: The updated item, must be of the correct type and have a primary key

        Returns:
            The updated item

        Raises:
            JsonDBException: If the item is not of the expected type, has no primary key, or the key doesn't exist
        """
        ...

    def remove(self, key_value: Any) -> bool:
        """Remove an item by primary key value."""
        ...
